<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="GO">

   <!-- goboard 삽입 -->
   <insert id="insertgoboard" > <!-- //nextval -->
      insert into tb_goboard(GBUNO, GBTITLE, GBCONTENT,
      GBRECRUITDATE, GBRECRUITAREA,
      GBRECRUITSTATUS, GBRECRUITNUMBER, GBRECRUITGENDER)
      values (
         #{gbUNo},
         #{gbTitle},
         #{gbContent},
         #{gbRecruitDate},
         #{gbRecruitArea},
         #{gbRecruitStatus},
         #{gbRecruitNumber},
         #{gbRecruitGender}
      )
   </insert>
   
   <!-- gocheck 삽입 -->
   <insert id="insertgoage"> <!-- //currval -->
       <foreach collection="list" item="age" separator=" " open="INSERT ALL" close="SELECT * FROM DUAL">
             INTO tb_gocheck (GCGBNO, GCCATE, GCVALUE)         
            VALUES(tb_goboard_SEQ.CURRVAL, 'age', #{age})
       </foreach>
   </insert>
   
   <insert id="insertgotheme"> 
       <foreach collection="list" item="theme" separator=" " open="INSERT ALL" close="SELECT * FROM DUAL">
            INTO tb_gocheck (GCGBNO, GCCATE, GCVALUE)         
            VALUES(tb_goboard_SEQ.CURRVAL, 'theme', #{theme})
       </foreach>
   </insert>
   
   <!-- 파일삽입 -->
   <insert id="insertgofile">
          
   </insert>
   
       <!-- golist 전체 출력(default 최신순) -->
   <select id="selectlist" resultType="hashmap">
      Select
          u.uno, u.userid, u.unick, uf.uforiginfilename, uf.ufstoredfilename,
         g.gbno, g.gbtitle, g.gbwrittendate, g.gbrecruitdate, g.gbrecruitarea, g.gbrecruitstatus, g.gbrecruitgender, g.gblikecnt,
          agecheck.*, themecheck.*
      From tb_goboard g
         left outer join tb_user u on g.gbuno = u.uno
         left outer join tb_userfile uf on u.uno = uf.ufuno
         left outer join (select gcgbno, LISTAGG(gcvalue, ',') WITHIN GROUP (order by gcvalue) as agecheck
                        from tb_gocheck where gccate='age' group by gcgbno) agecheck on g.gbno = agecheck.gcgbno
         left outer join (select gcgbno, LISTAGG(gcvalue, ',') WITHIN GROUP  (order by gcvalue) as themecheck
         from tb_gocheck where gccate='theme' group by gcgbno) themecheck on g.gbno = themecheck.gcgbno
      where u.uisleave = 0 and g.gbisdel = 0 
      order by g.gbwrittendate desc    
   </select>
   
   <!-- 검색기능 (리다이렉트) -->
   <select id="selectgosearch" resultType="hashmap">
      Select
          u.uno, u.userid, u.unick, uf.uforiginfilename, uf.ufstoredfilename,
         g.gbno, g.gbtitle, g.gbwrittendate, g.gbrecruitdate, g.gbrecruitarea, g.gbrecruitstatus, g.gbrecruitgender, g.gblikecnt,
          agecheck.*, themecheck.*
      From tb_goboard g
         left outer join tb_user u on g.gbuno = u.uno
         left outer join tb_userfile uf on u.uno = uf.ufuno
         left outer join (select gcgbno, LISTAGG(gcvalue, ',') WITHIN GROUP (order by gcvalue) as agecheck
                        from tb_gocheck where gccate='age' group by gcgbno) agecheck on g.gbno = agecheck.gcgbno
         left outer join (select gcgbno, LISTAGG(gcvalue, ',') WITHIN GROUP  (order by gcvalue) as themecheck
         from tb_gocheck where gccate='theme' group by gcgbno) themecheck on g.gbno = themecheck.gcgbno
      where u.uisleave = 0 and g.gbisdel = 0  
      and g.gbtitle || g.gbcontent LIKE '%' || #{searchText}  || '%'
      order by g.gbwrittendate desc
   </select>
   
   
   <!-- AJAX검색 -->
   <select id="selectfilter" resultType="hashmap">
         select u.uno, u.userid, u.unick, uf.uforiginfilename, 
            g.gbno, g.gbtitle, g.gbwrittendate, g.gbrecruitdate, g.gbrecruitarea, g.gbrecruitstatus, g.gbrecruitgender, g.gblikecnt, g.gbcontent, 
            LISTAGG(gcvalue, ',') WITHIN group(order by gcvalue) as gcvalue
         from tb_user u , tb_userfile uf, tb_goboard g , tb_gocheck gc
         WHERE uf.ufuno (+) = u.uno
            AND g.gbuno = u.uno
            AND gc.gcgbno = g.gbno
            AND u.uisleave = 0 AND g.gbisdel = 0 
            AND 
            <trim prefix="and (" prefixOverrides="OR" suffix=")">
               <if test="name =='gbRecruitGender' AND name != null"> <!-- 성별 -->
               OR gbrecruitgender = #{value}
               </if>
               <if test="name == 'gbRecruitStatus' AND name != null"> <!-- 상태 -->
               OR gbrecruitstatus = #{value}
               </if>
               <if test="name == 'gbRecruitArea' AND name != null"> <!-- 지역 -->
               OR gbrecruitarea = #{value}
               </if>
               <if test="name == 'gcTheme' AND name != null"> <!-- 여행테마 -->
               OR gcvalue = #{value}
               </if>
               <if test="name == 'gcAgeGroup' AND name != null"> <!-- 연령대 -->
               OR gcvalue = #{value}
               </if>
            </trim>
         group by gc.gcgbno, u.uno, u.userid, u.unick, 
            uf.uforiginfilename, g.gbno, g.gbtitle, g.gbwrittendate, g.gbrecruitdate, g.gblikecnt, g.gbcontent,
            g.GBRECRUITAREA, g.GBRECRUITSTATUS, g.GBRECRUITGENDER
         order by g.gbwrittendate desc
   </select>
   
   	<!-- 함께가요 상세 글 정보, 작성자 프로필 이미지 -->
   <select id="selectGoUserInfo" resultType="Map">
   		select BOARD.gbno, BOARD.gbuno, BOARD.gbtitle, BOARD.gbcontent, BOARD.gbwrittendate, board.gbrecruitstatus
    		, U.userId, u.ugender, (to_char(sysdate,'YYYY')-substr(U.ubirth,1,4)+1)age, UF.ufstoredfilename
		from tb_goboard BOARD 
    		join tb_user U on BOARD.gbuno = U.uno  
    		left join tb_userfile UF on UF.ufuno = U.uno  
		where gbno = #{gbNo }
   </select>
   
   <!-- 함께가요 상세 체크박스 -->
   <select id="selectGocheck" resultType="GoCheck">
   		select * from tb_gocheck where gcgbno = #{gbNo }
   </select>
   
   <!-- 함꼐가요 호스트 평점 -->
   <select id="selectGoHostReview" resultType="hashmap">
   		select *
		from (
    		select rownum rnum, n1.*
    		from(
        		select RBOARD.rbcontent, RBOARD.rbhoststar, RBOARD.rbwrittendate, U.userid, UF.ufstoredfilename
    			FROM tb_reviewboard RBOARD
    			join tb_user U on RBOARD.rbuno = U.uno
    			left join tb_userfile UF on UF.ufuno = U.uno
    			where RBOARD.rbgbno = #{gbNo }
    			order by RBOARD.rbhoststar DESC
    		)n1
		)
		WHERE rnum BETWEEN 1 AND 3
   </select>
   
   <!-- 함께가요 호스트 평점 갯수 -->
   <select id="selecthostReviewCnt" resultType="int">
   		select count(*)
   		from tb_reviewboard
   		where  rbgbno = #{gbNo }
   </select>
   
   <!-- 함께가요 동행 신청 -->
   <select id="insertGoDhApply">
   		insert into tb_goapply(GAGBNO, GAUNO, GASTATUS)
		values(#{gbNo }, #{uNo }, 0)
   </select>
   
   <!-- 함께가요 동행 신청 목록 -->
   <select id="selectgoDhApplylist" resultType="Map"> 
   		select U.userId, u.ugender, (to_char(sysdate,'YYYY')-substr(U.ubirth,1,4)+1)age, UF.ufstoredfilename
		from tb_goapply GOAPPLY 
    		join tb_user U on GOAPPLY.gauno = U.uno  
    		left join tb_userfile UF on UF.ufuno = U.uno  
		where gagbno = #{gbNo }
   </select>
   
</mapper>











